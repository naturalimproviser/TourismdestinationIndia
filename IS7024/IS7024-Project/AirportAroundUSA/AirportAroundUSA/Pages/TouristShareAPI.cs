// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
// using WeatherShare;
//
// var weatherShareApi = WeatherShareApi.FromJson(jsonString);

namespace TouristShare
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TouristShareApi
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public List<Datum> Data { get; set; }

        [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
        public long? Count { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("rh", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rh { get; set; }

        [JsonProperty("pod", NullValueHandling = NullValueHandling.Ignore)]
        public string Pod { get; set; }

        [JsonProperty("lon", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lon { get; set; }

        [JsonProperty("pres", NullValueHandling = NullValueHandling.Ignore)]
        public double? Pres { get; set; }

        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        [JsonProperty("ob_time", NullValueHandling = NullValueHandling.Ignore)]
        public string ObTime { get; set; }

        [JsonProperty("country_code", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [JsonProperty("clouds", NullValueHandling = NullValueHandling.Ignore)]
        public long? Clouds { get; set; }

        [JsonProperty("ts", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ts { get; set; }

        [JsonProperty("solar_rad", NullValueHandling = NullValueHandling.Ignore)]
        public long? SolarRad { get; set; }

        [JsonProperty("state_code", NullValueHandling = NullValueHandling.Ignore)]
        public string StateCode { get; set; }

        [JsonProperty("city_name", NullValueHandling = NullValueHandling.Ignore)]
        public string CityName { get; set; }

        [JsonProperty("wind_spd", NullValueHandling = NullValueHandling.Ignore)]
        public double? WindSpd { get; set; }

        [JsonProperty("wind_cdir_full", NullValueHandling = NullValueHandling.Ignore)]
        public string WindCdirFull { get; set; }

        [JsonProperty("wind_cdir", NullValueHandling = NullValueHandling.Ignore)]
        public string WindCdir { get; set; }

        [JsonProperty("slp", NullValueHandling = NullValueHandling.Ignore)]
        public double? Slp { get; set; }

        [JsonProperty("vis", NullValueHandling = NullValueHandling.Ignore)]
        public long? Vis { get; set; }

        [JsonProperty("h_angle", NullValueHandling = NullValueHandling.Ignore)]
        public double? HAngle { get; set; }

        [JsonProperty("sunset", NullValueHandling = NullValueHandling.Ignore)]
        public string Sunset { get; set; }

        [JsonProperty("dni", NullValueHandling = NullValueHandling.Ignore)]
        public double? Dni { get; set; }

        [JsonProperty("dewpt", NullValueHandling = NullValueHandling.Ignore)]
        public double? Dewpt { get; set; }

        [JsonProperty("snow", NullValueHandling = NullValueHandling.Ignore)]
        public long? Snow { get; set; }

        [JsonProperty("uv", NullValueHandling = NullValueHandling.Ignore)]
        public double? Uv { get; set; }

        [JsonProperty("precip", NullValueHandling = NullValueHandling.Ignore)]
        public long? Precip { get; set; }

        [JsonProperty("wind_dir", NullValueHandling = NullValueHandling.Ignore)]
        public long? WindDir { get; set; }

        [JsonProperty("sunrise", NullValueHandling = NullValueHandling.Ignore)]
        public string Sunrise { get; set; }

        [JsonProperty("ghi", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ghi { get; set; }

        [JsonProperty("dhi", NullValueHandling = NullValueHandling.Ignore)]
        public double? Dhi { get; set; }

        [JsonProperty("aqi", NullValueHandling = NullValueHandling.Ignore)]
        public long? Aqi { get; set; }

        [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lat { get; set; }

        [JsonProperty("datetime", NullValueHandling = NullValueHandling.Ignore)]
        public string Datetime { get; set; }

        [JsonProperty("temp", NullValueHandling = NullValueHandling.Ignore)]
        public double? Temp { get; set; }

        [JsonProperty("station", NullValueHandling = NullValueHandling.Ignore)]
        public string Station { get; set; }

        [JsonProperty("elev_angle", NullValueHandling = NullValueHandling.Ignore)]
        public double? ElevAngle { get; set; }

        [JsonProperty("app_temp", NullValueHandling = NullValueHandling.Ignore)]
        public double? AppTemp { get; set; }
    }

    public partial class Tourist
    {
        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public long? Code { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class TouristShareAPI
    {
        public static TouristShareAPI FromJson(string json)
        {
            return JsonConvert.DeserializeObject<TouristShareAPI>(json, TouristShare.Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this TouristShareAPI self)
        {
            return JsonConvert.SerializeObject(self, TouristShare.Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
{
new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
},
        };
    }
}